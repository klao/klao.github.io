{
  "version": 3,
  "sources": ["../src/main.ts", "../src/halfcube.ts", "../src/animation.ts"],
  "sourcesContent": ["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { halfCubeGeometry } from \"./halfcube.js\";\nimport { Animation } from \"./animation.js\";\n\nconst width = (window.innerWidth | 0) - 1;\nconst height = (window.innerHeight | 0) - 1;\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(width, height);\nrenderer.setClearColor(0x404040);\ndocument.body.appendChild(renderer.domElement);\n\nconst outer = new THREE.Object3D();\nscene.add(outer);\nconst inner = new THREE.Object3D();\nouter.add(inner);\n\nfunction makeHalfCube(flipped: boolean) {\n    const geometry = halfCubeGeometry(flipped);\n    const material = new THREE.MeshBasicMaterial({ vertexColors: true });\n    const polytope = new THREE.Mesh(geometry, material);\n    inner.add(polytope);\n\n    const edges = new THREE.EdgesGeometry(geometry);\n    const polytopeEdges = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0x000000 }));\n    polytope.add(polytopeEdges);\n    return polytope;\n}\nconst upperHalf = makeHalfCube(false);\nconst lowerHalf = makeHalfCube(true);\n\ncamera.position.set(-6, 1.7, 2);\ncamera.lookAt(upperHalf.position);\n\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.addEventListener(\"change\", requestDraw);\n\nconst shortPause = { t: 300, c: () => {} };\n\nfunction rotateHorizontally(p: number) {\n    outer.rotateY(p * Math.PI * 2);\n}\n\nfunction stand(up: boolean) {\n    const rotationAxis = new THREE.Vector3(1, 0, -1).normalize();\n    let rotationAngle = Math.acos(1 / Math.sqrt(3));\n    if (up) rotationAngle = -rotationAngle;\n\n    return (p: number) =>\n        inner.rotateOnWorldAxis(rotationAxis, p * rotationAngle);\n}\n\nconst translationAxis = new THREE.Vector3(1, 1, 1).normalize();\n\nfunction twist(p: number) {\n    upperHalf.rotateOnAxis(translationAxis, p * Math.PI / 3);\n}\n\nfunction separate(out: boolean) {\n    const translationAxis = new THREE.Vector3(1, 1, 1);\n    let translationDist = 1.2;\n    if (out) translationDist = -translationDist;\n\n    return (p: number) => {\n        lowerHalf.translateOnAxis(translationAxis, p * translationDist);\n        upperHalf.translateOnAxis(translationAxis, -p * translationDist / 3);\n    };\n}\n\nconst animation = new Animation([\n    { t: 3000, c: rotateHorizontally },\n    shortPause,\n    { t: 2000, c: stand(true) },\n    shortPause,\n    { t: 3000, c: rotateHorizontally },\n    shortPause,\n    { t: 2000, c: separate(true) },\n    shortPause,\n    { t: 1500, c: twist },\n    shortPause,\n    { t: 2000, c: separate(false) },\n    shortPause,\n    { t: 2000, c: stand(false) },\n    shortPause,\n]);\n\nlet drawRequested = false;\nfunction requestDraw() {\n    if (!drawRequested) requestAnimationFrame(draw);\n    drawRequested = true;\n}\n\nfunction draw(now: number) {\n    drawRequested = false;\n    if (animation.isRunning()) {\n        animation.stepForward(now);\n        requestDraw();\n    }\n\n    renderer.render(scene, camera);\n}\n\nrequestDraw();\n\nconst icon = document.querySelector(\"#play > i\") as HTMLElement;\nfunction togglePause() {\n    animation.togglePause();\n    icon.classList.toggle(\"fa-play\");\n    icon.classList.toggle(\"fa-pause\");\n    requestDraw();\n}\n\ndocument.getElementById(\"play\")!.addEventListener(\"click\", togglePause);\n\nwindow.addEventListener(\"keydown\", (event) => {\n    if (event.key === \" \") {\n        event.preventDefault();\n        togglePause();\n    }\n});\n", "import * as THREE from \"three\";\n\nconst rubikColors: Record<string, number> = {\n    yellow: 0xffd500,\n    white: 0xffffff,\n    blue: 0x0046ad,\n    green: 0x009b48,\n    red: 0xb71234,\n    orange: 0xff5800,\n    black: 0x202020,\n};\n\nconst opposite: Record<string, string> = {};\nfor (const [a, b] of [[\"white\", \"yellow\"], [\"blue\", \"green\"], [\"red\", \"orange\"], [\"black\", \"black\"]]) {\n    opposite[a] = b;\n    opposite[b] = a;\n}\n\nexport const halfCubeGeometry = (flipped: boolean) => {\n    const vertices = [];\n    let index = [];\n    const colors: number[][] = [];\n\n    function pushColors(color: string, numVertices: number) {\n        if (flipped) color = opposite[color];\n        const colorArray = new THREE.Color(rubikColors[color]).toArray();\n        for (let i = 0; i < numVertices; ++i)\n            colors.push(colorArray);\n    }\n\n    // White-blue-red is the (1, 1, 1) corner.\n\n    vertices.push([1, -1, 0], [1, -1, 1], [0, -1, 1]); // orange triangle\n    index.push([0, 1, 2]);\n    pushColors(\"orange\", 3);\n\n    vertices.push([0, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1], [-1, 0, 1]); // blue pentagon\n    index.push([3, 4, 5], [3, 5, 6], [3, 6, 7]);\n    pushColors(\"blue\", 5);\n\n    vertices.push([-1, 0, 1], [-1, 1, 1], [-1, 1, 0]); // yellow triangle\n    index.push([8, 9, 10]);\n    pushColors(\"yellow\", 3);\n\n    vertices.push([-1, 1, 0], [-1, 1, 1], [1, 1, 1], [1, 1, -1], [0, 1, -1]); // red pentagon\n    index.push([11, 12, 13], [11, 13, 14], [11, 14, 15]);\n    pushColors(\"red\", 5);\n\n    vertices.push([0, 1, -1], [1, 1, -1], [1, 0, -1]); // green triangle\n    index.push([16, 17, 18]);\n    pushColors(\"green\", 3);\n\n    vertices.push([1, 0, -1], [1, 1, -1], [1, 1, 1], [1, -1, 1], [1, -1, 0]); // white pentagon\n    index.push([19, 20, 21], [19, 21, 22], [19, 22, 23]);\n    pushColors(\"white\", 5);\n\n    vertices.push([1, -1, 0], [0, -1, 1], [-1, 0, 1], [-1, 1, 0], [0, 1, -1], [1, 0, -1]); // hexagon base\n    index.push([24, 25, 26], [24, 26, 27], [24, 27, 28], [24, 28, 29]);\n    pushColors(\"black\", 6);\n\n    const geometry = new THREE.BufferGeometry();\n    let positions = vertices.flat();\n    if (flipped) {\n        positions = positions.map(x => -x);\n        index = index.map(face => { return face.reverse(); });\n    }\n    geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3));\n    geometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors.flat(), 3));\n    geometry.setIndex(index.flat());\n    return geometry;\n};\n", "export type Step = { t: number, c: (dp: number) => void };\n\nfunction linear(begin: number, end: number): number {\n    return end - begin;\n}\n\nfunction easeInOut(begin: number, end: number): number {\n    return (Math.cos(begin * Math.PI) - Math.cos(end * Math.PI)) / 2;\n}\n\nexport class Animation {\n    private steps: Step[];\n    private step = 0;\n    private stepProgress = 0;\n    private lastTime = -1;\n    private running = false;\n\n    constructor(steps: Step[]) {\n        this.steps = steps;\n    }\n\n    public isRunning() {\n        return this.running;\n    }\n\n    public togglePause() {\n        this.running = !this.running;\n        if (this.running) {\n            this.lastTime = -1;\n        }\n    }\n\n    public stepForward(now: number) {\n        if (this.lastTime === -1) {\n            this.lastTime = now;\n            return;\n        }\n        const curStep = this.steps[this.step];\n        const dp = (now - this.lastTime) / curStep.t;\n        this.lastTime = now;\n        const begin = this.stepProgress;\n        let end = this.stepProgress + dp;\n        if (end >= 1) {\n            end = 1;\n            this.stepProgress = 0;\n            ++this.step;\n            if (this.step >= this.steps.length) {\n                this.step = 0;\n            }\n        } else {\n            this.stepProgress = end;\n        }\n        curStep.c(easeInOut(begin, end));\n    }\n}\n"],
  "mappings": "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",
  "names": ["THREE", "OrbitControls", "THREE", "rubikColors", "opposite", "a", "b", "halfCubeGeometry", "flipped", "vertices", "index", "colors", "pushColors", "color", "numVertices", "colorArray", "i", "geometry", "positions", "x", "face", "easeInOut", "begin", "end", "Animation", "steps", "now", "curStep", "dp", "width", "height", "scene", "camera", "renderer", "outer", "inner", "makeHalfCube", "flipped", "geometry", "halfCubeGeometry", "material", "polytope", "edges", "polytopeEdges", "upperHalf", "lowerHalf", "controls", "OrbitControls", "requestDraw", "shortPause", "rotateHorizontally", "p", "stand", "up", "rotationAxis", "rotationAngle", "translationAxis", "twist", "separate", "out", "translationDist", "animation", "Animation", "drawRequested", "draw", "now", "icon", "togglePause", "event"]
}
