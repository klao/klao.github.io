{
  "version": 3,
  "sources": ["../src/main.ts", "../src/animation.ts", "../src/4dcube.ts"],
  "sourcesContent": ["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { Animation } from \"./animation.js\";\nimport { AxisSelect, FourCubeSlice } from \"./4dcube.js\";\n\nconst fourCube = new FourCubeSlice();\n(globalThis as any).fc = fourCube;\n\nconst scene = new THREE.Scene();\nconst width = (window.innerWidth | 0) - 1;\nconst height = (window.innerHeight | 0) - 1;\nconst camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(width, height);\nrenderer.setClearColor(0x404040);\ndocument.body.appendChild(renderer.domElement);\n\nfourCube.center();\nconst mesh = fourCube.getObject();\nscene.add(mesh);\n\ncamera.position.set(-9, 1.7, 2);\ncamera.lookAt(mesh.position);\n\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.addEventListener(\"change\", requestDraw);\n\nlet animation = new Animation([\n    { t: 4000, c: (dp) => { fourCube.shiftUp(dp * 1.5); } },\n    { t: 8000, c: (dp) => { fourCube.shiftUp(dp * -3); } },\n    { t: 4000, c: (dp) => { fourCube.shiftUp(dp * 1.5); } },\n]);\n\nlet drawRequested = false;\nfunction requestDraw() {\n    if (!drawRequested) requestAnimationFrame(draw);\n    drawRequested = true;\n}\n\nfunction draw(now: number) {\n    drawRequested = false;\n    if (animation.isRunning()) {\n        animation.stepForward(now);\n        requestDraw();\n    }\n    if (updateControls()) requestDraw();\n    renderer.render(scene, camera);\n}\n\nrequestDraw();\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// Controls\n\nconst activeControls = new Array(8).fill(false);\n\nfunction updateControls(): boolean {\n    let changed = false;\n    for (let i = 0; i < 8; ++i) {\n        if (!activeControls[i]) continue;\n        changed = true;\n        const amount = i % 2 ? -0.02 : 0.02;\n        if (i < 6) {\n            fourCube.rotate(i >> 1 as AxisSelect, amount);\n        } else {\n            fourCube.shiftUp(amount);\n        }\n    }\n    return changed;\n}\n\nfunction activateControl(i: number) {\n    if (activeControls[i]) return;\n    activeControls[i] = true;\n    controlIcons[i].classList.add(\"active\");\n    requestDraw();\n}\n\nfunction deactivateControl(i: number) {\n    if (!activeControls[i]) return;\n    controlIcons[i].classList.remove(\"active\");\n    activeControls[i] = false;\n}\n\nconst icon = document.querySelector(\"#play > i\") as HTMLElement;\nfunction togglePause() {\n    animation.togglePause();\n    icon.classList.toggle(\"fa-play\");\n    icon.classList.toggle(\"fa-pause\");\n    requestDraw();\n}\n\nfunction reset() {\n    // TODO: when we have animation again, we need to reset it here\n    // animation.reset();\n    fourCube.center();\n    requestDraw();\n}\n\ndocument.getElementById(\"play\")!.addEventListener(\"click\", reset);\n\nconst keyControls = [\"q\", \"a\", \"w\", \"s\", \"e\", \"d\", \"r\", \"f\"];\nconst keyControlMap = new Map<string, number>();\nfor (let i = 0; i < keyControls.length; ++i) {\n    keyControlMap.set(keyControls[i], i);\n}\n\nwindow.addEventListener(\"keydown\", (event) => {\n    if (event.key === \" \") {\n        event.preventDefault();\n        togglePause();\n    }\n    if (keyControlMap.has(event.key)) {\n        event.preventDefault();\n        activateControl(keyControlMap.get(event.key)!);\n    }\n});\n\nwindow.addEventListener(\"keyup\", (event) => {\n    if (keyControlMap.has(event.key)) {\n        event.preventDefault();\n        deactivateControl(keyControlMap.get(event.key)!);\n    }\n});\n\nconst controlIcons = document.querySelectorAll(\"#controls i\");\n\ncontrolIcons.forEach((el, i) => {\n    el.addEventListener(\"pointerdown\", (event) => {\n        event.preventDefault();\n        activateControl(i);\n    });\n    el.addEventListener(\"pointerup\", (event) => {\n        event.preventDefault();\n        deactivateControl(i);\n    });\n});\n", "export type Step = { t: number, c: (dp: number) => void };\n\nfunction linear(begin: number, end: number): number {\n    return end - begin;\n}\n\nfunction easeInOut(begin: number, end: number): number {\n    return (Math.cos(begin * Math.PI) - Math.cos(end * Math.PI)) / 2;\n}\n\nexport class Animation {\n    private steps: Step[];\n    private step = 0;\n    private stepProgress = 0;\n    private lastTime = -1;\n    private running = false;\n\n    constructor(steps: Step[]) {\n        this.steps = steps;\n    }\n\n    public isRunning() {\n        return this.running;\n    }\n\n    public togglePause() {\n        this.running = !this.running;\n        if (this.running) {\n            this.lastTime = -1;\n        }\n    }\n\n    public stepForward(now: number) {\n        if (this.lastTime === -1) {\n            this.lastTime = now;\n            return;\n        }\n        const curStep = this.steps[this.step];\n        const dp = (now - this.lastTime) / curStep.t;\n        this.lastTime = now;\n        const begin = this.stepProgress;\n        let end = this.stepProgress + dp;\n        if (end >= 1) {\n            end = 1;\n            this.stepProgress = 0;\n            ++this.step;\n            if (this.step >= this.steps.length) {\n                this.step = 0;\n            }\n        } else {\n            this.stepProgress = end;\n        }\n        curStep.c(easeInOut(begin, end));\n    }\n}\n", "import * as THREE from \"three\";\nimport { Vector4, Vector3, Color, Matrix4 } from \"three\";\n\nconst rubikColors: Color[] = [\n    0xffd500, // yellow\n    0xffffff, // white\n    0x0046ad, // blue\n    0x009b48, // green\n    0xb71234, // orange\n    0xff5800, // red\n    0xffc0cb, // pink\n    0x800080, // purple\n].map(c => new Color(c));\n\nfunction decodeVertex(v: number): Vector4 {\n    const x = (v & 1) * 2 - 1;\n    const y = (v & 2) * 1 - 1;\n    const z = (v & 4) * 0.5 - 1;\n    const w = (v & 8) * 0.25 - 1;\n    return new Vector4(x, y, z, w);\n}\n\nconst origVertices: Vector4[] = [];\nfor (let i = 0; i < 16; ++i) {\n    origVertices.push(decodeVertex(i));\n}\n\n// Iterates over subsets of [0..15) of size 8 that correspond to a cube face with a correct orientation.\nfunction iterate3Faces(callback: (faceNum: number, facet: number[]) => void) {\n    const ix = new Array(8).fill(0);\n    for (let p = 0; p < 4; ++p) {\n        const low = (1 << p) - 1;\n        const high = 0xff ^ low;\n        for (let t = 0; t < 2; ++t) {\n            const m = t << p;\n            // Orientation of the face\n            const o = (1 ^ p ^ t) & 1;\n            for (let i = 0; i < 8; ++i) {\n                const j = ((i & high) << 1 | (i & low)) | m;\n                ix[i ^ o] = j;\n            }\n            callback(p << 1 | t, ix.slice());\n        }\n    }\n}\n\n// Input: cube vertex indices (array of 8 numbers)\n// Iterates over subsets of the input of size 4 that correspond to a square face with a correct orientation.\nfunction iterate2Faces(vertices: number[], callback: (faceNum: number, facet: number[]) => void) {\n    const ix = new Array(4).fill(0);\n    for (let p = 0; p < 3; ++p) {\n        const low = (1 << p) - 1;\n        const high = 0xff ^ low;\n        for (let t = 0; t < 2; ++t) {\n            const m = t << p;\n            // Orientation of the face\n            const o = (1 ^ p ^ t) & 1;\n            for (let i = 0; i < 4; ++i) {\n                const j = ((i & high) << 1 | (i & low)) | m;\n                ix[i ^ o] = j;\n            }\n            callback(p << 1 | t, ix.map(i => vertices[i]));\n        }\n    }\n}\n\n// Iterates over pairs from [0..8) that correspond to a cube edge.\n// Note: orientation is wrong!\n// TODO: remove\nfunction iterateEdges(callback: (a: number, b: number) => void) {\n    for (let p = 0; p < 3; ++p) {\n        const pm = 1 << p;\n        const low = pm - 1;\n        const high = 3 ^ low;\n        for (let i = 0; i < 4; ++i) {\n            const j = (i & high) << 1 | (i & low);\n            callback(j, j | pm);\n        }\n    }\n}\n\n// Input: a.w < 0 <= b.w\n// Returns the point where the line segment from a to b crosses the w = 0 plane, as Vector3.\nfunction intersect(a: Vector4, b: Vector4): Vector3 {\n    return new Vector3(a.x, a.y, a.z).lerp(new Vector3(b.x, b.y, b.z), -a.w / (b.w - a.w));\n}\n\ntype EdgeEnd = { n: number, p: number, v: Vector3 };\ntype Edge = { s: EdgeEnd, e: EdgeEnd };\nexport type AxisSelect = 0 | 1 | 2;\n\nexport class FourCubeSlice {\n    private transform: THREE.Matrix4;\n    private translation: Vector4;\n\n    private positions: Float32Array;\n    private positionAttr: THREE.BufferAttribute;\n    private colors: Float32Array;\n    private colorAttr: THREE.BufferAttribute;\n    private geometry: THREE.BufferGeometry;\n    private wireGeometry: THREE.BufferGeometry;\n\n    // Current index into positions (have to be multiplied by 3 for element index)\n    private ip: number = 0;\n    private index: number[] = [];\n    private wireIndex: number[] = [];\n\n    private vertices: Vector4[] = [];\n\n    constructor() {\n        this.transform = new THREE.Matrix4();\n        this.translation = new Vector4(0, 0, 0, 0);\n\n        // Overestimation: 8 faces, each at most 12 vertices (6 in actuality)\n        const attrSize = 8 * 12 * 3;\n        this.positions = new Float32Array(attrSize);\n        this.positionAttr = new THREE.BufferAttribute(this.positions, 3);\n        this.positionAttr.setUsage(THREE.DynamicDrawUsage);\n\n\n        this.colors = new Float32Array(attrSize);\n        this.colorAttr = new THREE.BufferAttribute(this.colors, 3);\n        this.colorAttr.setUsage(THREE.DynamicDrawUsage);\n\n        this.geometry = new THREE.BufferGeometry();\n        this.geometry.setAttribute(\"position\", this.positionAttr);\n        this.geometry.setAttribute(\"color\", this.colorAttr);\n        this.geometry.setIndex([]);\n\n        this.wireGeometry = new THREE.BufferGeometry();\n        this.wireGeometry.setAttribute(\"position\", this.positionAttr);\n        this.wireGeometry.setIndex([]);\n    }\n\n    public getVertices(): Vector4[] {\n        return origVertices.map(v => v.clone().applyMatrix4(this.transform).add(this.translation));\n    }\n\n    public currentMask(): number {\n        const vs = this.getVertices();\n        let mask = 0;\n        for (const v of vs) {\n            mask <<= 1;\n            if (v.w > 0) mask |= 1;\n        }\n        return mask;\n    }\n\n    public updateFace(faceNum: number, face: number[]) {\n        // TODO: deal with zeroes\n        let hasPositive = false;\n        let hasNegative = false;\n        const v = this.vertices;\n        for (const i of face) {\n            if (v[i].w > 0) hasPositive = true;\n            if (v[i].w < 0) hasNegative = true;\n        }\n        if (!hasPositive || !hasNegative) return;\n        const ip0 = this.ip;\n        const edges: Edge[] = [];\n        iterate2Faces(face, (sqNum: number, square: number[]) => {\n            let vi = [0, 2, 3, 1, 0, 2, 3, 1].map(i => square[i]);\n            let i = 0;\n            for (; i < 8; ++i) {\n                if (v[vi[i]].w < 0) break;\n            }\n            if (i === 8) return;\n            for (; i < 8; ++i) {\n                if (v[vi[i]].w >= 0) break;\n            }\n            if (i === 8) return;\n            const s = {\n                n: vi[i - 1],\n                p: vi[i],\n                v: intersect(v[vi[i - 1]], v[vi[i]]),\n            }\n            for (; i < 8; ++i) {\n                if (v[vi[i]].w > 0) break;\n            }\n            if (i === 8) return;\n            for (; i < 8; ++i) {\n                if (v[vi[i]].w < 0) break;\n            }\n            if (i === 8) return; // This cannot happen\n            const e = {\n                n: vi[i],\n                p: vi[i - 1],\n                v: intersect(v[vi[i]], v[vi[i - 1]]),\n            }\n            edges.push({ s, e });\n        });\n        if (edges.length === 0) return; // This cannot happen\n\n        // Order the edges\n        const orderedEdges: Edge[] = [];\n        orderedEdges.push(edges.pop()!);\n        while (edges.length > 0) {\n            const last = orderedEdges[orderedEdges.length - 1].e;\n            const next = edges.findIndex(e => e.s.n === last.n && e.s.p === last.p);\n            if (next === -1) {\n                console.log(\"edges\", edges);\n                console.log(\"orderedEdges\", orderedEdges);\n                throw new Error(\"Cannot find next edge\");\n            }\n            orderedEdges.push(edges[next]);\n            edges.splice(next, 1);\n        }\n        if (!(orderedEdges[0].s.n === orderedEdges[orderedEdges.length - 1].e.n &&\n            orderedEdges[0].s.p === orderedEdges[orderedEdges.length - 1].e.p)) {\n            console.log(\"edges\", edges);\n            console.log(\"orderedEdges\", orderedEdges);\n            throw new Error(\"Edges do not form a loop\");\n        }\n\n        // Add the vertices\n        const ps = this.positions;\n        const cs = this.colors;\n        const color = rubikColors[faceNum];\n        for (const e of orderedEdges) {\n            e.s.v.toArray(ps, this.ip * 3);\n            color.toArray(cs, this.ip * 3);\n            ++this.ip;\n        }\n\n        // Add the indices\n        const ip1 = this.ip;\n        this.index.push(ip0, ip0 + 1, ip0 + 2);\n        for (let i = ip0 + 2; i <= ip1 - 2; ++i) {\n            this.index.push(ip0, i, i + 1);\n        }\n\n        for (let i = ip0; i < ip1 - 1; ++i) {\n            this.wireIndex.push(i, i + 1);\n        }\n        this.wireIndex.push(ip1 - 1, ip0);\n    }\n\n    public update(): void {\n        this.vertices = this.getVertices();\n        this.ip = 0;\n        // TODO: optimize allocating index array?\n        this.index = [];\n        this.wireIndex = [];\n        iterate3Faces(this.updateFace.bind(this));\n        this.positionAttr.needsUpdate = true;\n        this.colorAttr.needsUpdate = true;\n        this.geometry.setIndex(this.index);\n        this.wireGeometry.setIndex(this.wireIndex);\n    }\n\n\n    public getObject(): THREE.Object3D {\n        const material = new THREE.MeshBasicMaterial({ vertexColors: true });\n        const mesh = new THREE.Mesh(this.geometry, material);\n\n        const wireMaterial = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2 });\n        const wireframe = new THREE.LineSegments(this.wireGeometry, wireMaterial);\n\n        mesh.add(wireframe);\n        return mesh;\n    }\n\n    public setStandingTransform(): void {\n        const a = new Vector4(1, 1, 1, 1).normalize();\n        const b = new Vector4(1, 1, -1, -1).normalize();\n        const c = new Vector4(1, -1, 1, -1).normalize();\n        const d = new Vector4(-1, 1, 1, -1).normalize();\n        const v = this.transform.elements;\n        a.toArray(v);\n        b.toArray(v, 4);\n        c.toArray(v, 8);\n        d.toArray(v, 12);\n    }\n\n    public setStandingTranslation(): void {\n        this.translation.set(0, 0, 0, -1.5);\n    }\n\n    public shiftUp(l: number): void {\n        this.translation.w += l;\n        this.update();\n    }\n\n    public rotate(axis: AxisSelect, angle: number): void {\n        const m = new Matrix4();\n        m.elements[axis * 5] = m.elements[15] = Math.cos(angle);\n        m.elements[axis * 4 + 3] = Math.sin(angle);\n        m.elements[12 + axis] = -Math.sin(angle);\n        this.transform.multiply(m);\n        this.update();\n    }\n\n    public center(): void {\n        this.setStandingTransform();\n        this.translation.set(0, 0, 0, 0.001);\n        this.update();\n    }\n\n    public xt(): void {\n        this.setStandingTransform();\n        this.setStandingTranslation();\n    }\n}\n"],
  "mappings": "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",
  "names": ["THREE", "OrbitControls", "easeInOut", "begin", "end", "Animation", "steps", "now", "curStep", "dp", "THREE", "Vector4", "Vector3", "Color", "Matrix4", "rubikColors", "c", "decodeVertex", "v", "x", "y", "z", "w", "origVertices", "i", "iterate3Faces", "callback", "ix", "p", "low", "high", "t", "m", "o", "j", "iterate2Faces", "vertices", "intersect", "a", "b", "Vector3", "FourCubeSlice", "Vector4", "attrSize", "origVertices", "v", "vs", "mask", "faceNum", "face", "hasPositive", "hasNegative", "i", "ip0", "edges", "iterate2Faces", "sqNum", "square", "vi", "s", "e", "orderedEdges", "last", "next", "ps", "cs", "color", "rubikColors", "ip1", "iterate3Faces", "material", "mesh", "wireMaterial", "wireframe", "c", "d", "l", "axis", "angle", "m", "Matrix4", "fourCube", "FourCubeSlice", "scene", "width", "height", "camera", "renderer", "mesh", "controls", "OrbitControls", "requestDraw", "animation", "Animation", "dp", "drawRequested", "draw", "now", "updateControls", "activeControls", "changed", "i", "amount", "activateControl", "controlIcons", "deactivateControl", "icon", "togglePause", "reset", "keyControls", "keyControlMap", "event", "el"]
}
